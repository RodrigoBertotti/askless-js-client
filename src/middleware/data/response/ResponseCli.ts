import {ResponseErrorCode} from "../Types";
import {ConnectionConfiguration} from "./ConnectionConfiguration";

export type OnClientSuccessfullyReceives = (clientId: number | string) => void;

export type OnClientFailsToReceive = (clientId: number | string) => void;

export interface ResponseErrorParams {
    code?: ResponseErrorCode | string;
    description?: string;
    stack?;
}

export class ResponseError {
    private readonly _class_type_reqerror = "_";
    readonly code: ResponseErrorCode | string;
    readonly description: string;
    readonly stack: any;

    constructor(ResponseErrorParams?: ResponseErrorParams) {
        if (ResponseErrorParams) {
            this.code = ResponseErrorParams.code;
            this.description = ResponseErrorParams.description;
            this.stack = ResponseErrorParams.stack;
        }
    }
    //TODO? onClientSuccessfullyReceives and onClientFailsToReceive
}

export interface RespondSuccessParams {
    output: any;
    onClientSuccessfullyReceives?: OnClientSuccessfullyReceives;
    onClientFailsToReceive?: OnClientFailsToReceive;
}

/**
 * The response of an operation in the server.
 * */
export class RespondSuccess {
    private readonly _class_type_success = "_";

    public readonly onClientFailsToReceive: OnClientFailsToReceive;
    public readonly onClientSuccessfullyReceives: OnClientSuccessfullyReceives;
    public readonly output: any;

    constructor(successParams?: RespondSuccessParams) {
        //if((successParams as RespondSuccessParams).output==null){
        //    throw Error("Err");
        //}
        if (successParams) {
            this.output = successParams.output;
            this.onClientSuccessfullyReceives =
                successParams.onClientSuccessfullyReceives;
            this.onClientFailsToReceive = successParams.onClientFailsToReceive;
        }
    }
}

/** The response of an operation in the server. */
export class ResponseCli {
    private readonly _class_type_response = "_";
    static type = '_class_type_response';
    public static readonly RESPONSE_PREFIX = "RES-";

    constructor(
        /** Request ID generated by the client. */
        public readonly clientRequestId: string, // evitar que o servidor receba 2 vezes a mesma mensagem e evitar que o cliente receba 2 vezes a mesma mensagem
        /** Result of operation in the server.
         *
         * Do NOT use this field tho check if the operation
         * failed (because it can be null even in case of success),
         * instead use {@link isSuccess()}.
        */
        public readonly output: any,
        /** The response error in case where `isSuccess == false` */
        public readonly error?: ResponseError,
        public readonly dataType = "ResponseCli",
        public readonly serverId?: string
    ) {
        if(output instanceof ResponseError){
            throw Error("output must not be a ResponseError")
        }
    }

    /** Returns `true` if the response is a success. */
    isSuccess(): boolean {
        return this.error == null;
    }
}

export class ServerConfirmReceiptCli extends ResponseCli {
    //enviar 1 vez após o recebimento da informação e deve ficar enviando isso TODA vez que o servidor tentar enviar a informação novamente
    private readonly _class_type_serverconfirmreceipt = "_";
    static type = '_class_type_serverconfirmreceipt';

    constructor(clientRequestId: string) {
        super(clientRequestId, "RECEIVED", null, "ServerConfirmReceiptCli");
    }
}

export class ConfigureConnectionResponseCli extends ResponseCli {
    private readonly _class_type_configureconnection = "_";
    static type = '_class_type_configureconnection';

    constructor(clientRequestId: string, connectionConfiguration:ConnectionConfiguration, err?:ResponseError) {
        super(
            clientRequestId,
            connectionConfiguration,
            err,
            "ConfigureConnectionResponse"
        );
    }
}

export class NewDataForListener {
    static type = '_class_type_newDataForListener';

    public static readonly PREFIX = "NEW-";
    private readonly _class_type_newDataForListener = "_";
    public readonly type = "NewDataForListener";
    public readonly serverId: string;

    constructor(
        public readonly output: any,
        public readonly listenId: string
    ) {}

}
